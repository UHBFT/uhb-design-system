/* ============================================================================
   05-OBJECTS -> #ASPECT-RATIO
   ========================================================================= */

/**
 * The aspect ratio object is a resposnive container with a fixed aspect ratio
 * based on the width of its parent element.
 *
 * @demo
 * https://www.uhb.nhs.uk/design-system/foundation/containers.htm
 */


@use 'sass:math' as *;


//
// Settings
//

$aspect-ratio-map: (
  '2\\/1':  (2:1),
  '3\\/2':  (3:2),
  '4\\/3':  (4:3),
  '16\\/9': (16:9)
) !default;


/**
 * Aspect ratio
 *
 * 1. Set the 'padding-top' property to '100%' to make the default aspect ratio
 *    1:1.
 */

.uhb-o-aspect-ratio {
  display: block;
  overflow: hidden;
  padding-top: 100%; // [1]
  position: relative;
}


/**
 * Aspect ratio content
 */

.uhb-o-aspect-ratio__content,
.uhb-o-aspect-ratio > * {
  align-items: center;
  bottom: 0;
  display: flex;
  height: 100%;
  justify-content: center;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
}


/**
 * Aspect ratio for Vimeo content
 */

.uhb-o-aspect-vimeo {
  padding: 56.25% 0 0 0;
  position: relative;
}


/* MODIFIERS
   ========================================================================= */

/**
 * Aspect ratios
 *
 * Generate aspect ratio classes from the $uhb-aspect-ratio map.
 */

 @each $ratio-name, $ratio-value in $aspect-ratio-map {

  // Loop through each aspect ratio in the map
  @each $x, $y in $ratio-value {

    // Check $x is a number
    @if (type-of($x) != 'number') {
      @error 'Expected a number but received a #{type-of($x)}.';
    }

    // Check $y is a number
    @if (type-of($y) != 'number') {
      @error 'Expected a number but received a #{type-of($y)}.';
    }

    .uhb-o-aspect-ratio--#{$ratio-name} {
      padding-top: div($y, $x) * 100%;
    }

  }

}